<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="net_8c" kind="file">
    <compoundname>net.c</compoundname>
    <includes local="no">time.h</includes>
    <includes local="no">unistd.h</includes>
    <includes local="no">netdb.h</includes>
    <includes local="no">arpa/inet.h</includes>
    <includes local="no">sys/socket.h</includes>
    <includes local="no">sys/types.h</includes>
    <includes refid="net_8h" local="yes">net.h</includes>
    <incdepgraph>
      <node id="68">
        <label>arpa/inet.h</label>
      </node>
      <node id="74">
        <label>stdint.h</label>
      </node>
      <node id="73">
        <label>stdlib.h</label>
      </node>
      <node id="67">
        <label>netdb.h</label>
      </node>
      <node id="72">
        <label>defines.h</label>
        <link refid="defines_8h"/>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
      </node>
      <node id="70">
        <label>sys/types.h</label>
      </node>
      <node id="76">
        <label>string.h</label>
      </node>
      <node id="66">
        <label>unistd.h</label>
      </node>
      <node id="65">
        <label>time.h</label>
      </node>
      <node id="64">
        <label>common/net.c</label>
        <link refid="net.c"/>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
      </node>
      <node id="71">
        <label>net.h</label>
        <link refid="net_8h"/>
        <childnode refid="72" relation="include">
        </childnode>
      </node>
      <node id="69">
        <label>sys/socket.h</label>
      </node>
      <node id="75">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="net_8c_1a5648e23ffc8afb543a41ca08b252e2c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int readSocket</definition>
        <argsstring>(int sock, char recvline[])</argsstring>
        <name>readSocket</name>
        <param>
          <type>int</type>
          <declname>sock</declname>
        </param>
        <param>
          <type>char</type>
          <declname>recvline</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read from Socket </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/strikles/workspace/common/net.c" line="24" column="1" bodyfile="/home/strikles/workspace/common/net.c" bodystart="24" bodyend="53"/>
        <references refid="defines_8h_1a51d90ea93d4b55e086cb490f7478e684" compoundref="defines_8h" startline="14">MAX_MSG_LEN</references>
        <referencedby refid="client_8c_1a3c04138a5bfe5d72780bb7e82a18e627" compoundref="client_8c" startline="31" endline="98">main</referencedby>
        <referencedby refid="server_8h_1a99c88edc68ebbf9b09eabca690a3b515" compoundref="server_8c" startline="113" endline="164">connection_handler</referencedby>
      </memberdef>
      <memberdef kind="function" id="net_8c_1adb296d69ad81a26650f6478eb63c78bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int writeSocket</definition>
        <argsstring>(int sock, char sendline[])</argsstring>
        <name>writeSocket</name>
        <param>
          <type>int</type>
          <declname>sock</declname>
        </param>
        <param>
          <type>char</type>
          <declname>sendline</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write to socket </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/strikles/workspace/common/net.c" line="58" column="1" bodyfile="/home/strikles/workspace/common/net.c" bodystart="58" bodyend="80"/>
        <references refid="defines_8h_1a51d90ea93d4b55e086cb490f7478e684" compoundref="defines_8h" startline="14">MAX_MSG_LEN</references>
        <referencedby refid="client_8c_1a3c04138a5bfe5d72780bb7e82a18e627" compoundref="client_8c" startline="31" endline="98">main</referencedby>
        <referencedby refid="server_8h_1a99c88edc68ebbf9b09eabca690a3b515" compoundref="server_8c" startline="113" endline="164">connection_handler</referencedby>
      </memberdef>
      <memberdef kind="function" id="net_8c_1a7e8fd0c8a9ece620618794b18387aa99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int connectToServer</definition>
        <argsstring>(void *sock_desc)</argsstring>
        <name>connectToServer</name>
        <param>
          <type>void *</type>
          <declname>sock_desc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Connect to Sever </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/strikles/workspace/common/net.c" line="85" column="1" bodyfile="/home/strikles/workspace/common/net.c" bodystart="85" bodyend="101"/>
        <references refid="defines_8h_1aee1132b8a79e9a6dd0d19a93f7133389" compoundref="defines_8h" startline="15">SRV_PORT</references>
        <references refid="defines_8h_1ad43b436f38b6543a54dc74559fe7be11" compoundref="defines_8h" startline="16">SRV_ADDR</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>networking common net definitions </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Claudio Neto</para></simplesect>
<simplesect kind="date"><para>3/11/2015 </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="11"><highlight class="preprocessor">#include<sp/>&lt;time.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;netdb.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;arpa/inet.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/socket.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/types.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="net_8h" kindref="compound">net.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="24" refid="net_8h_1a5648e23ffc8afb543a41ca08b252e2c6" refkind="member"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="net_8c_1a5648e23ffc8afb543a41ca08b252e2c6" kindref="member">readSocket</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sock,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>recvline[])</highlight></codeline>
<codeline lineno="25"><highlight class="normal">{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>puts(</highlight><highlight class="stringliteral">&quot;socket<sp/>reading...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>pBuf<sp/>=<sp/>recvline;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0,<sp/>bytesLeft<sp/>=<sp/><ref refid="defines_8h_1a51d90ea93d4b55e086cb490f7478e684" kindref="member">MAX_MSG_LEN</ref><sp/>-<sp/>1,<sp/>bytesDone<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(bytesLeft<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((n<sp/>=<sp/>read(sock,<sp/>pBuf,<sp/>bytesLeft))<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>perror(</highlight><highlight class="stringliteral">&quot;ERROR<sp/>writing<sp/>to<sp/>socket&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(n<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>puts(</highlight><highlight class="stringliteral">&quot;socket<sp/>closed<sp/>?&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pBuf<sp/>+=<sp/>n;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bytesLeft<sp/>-=<sp/>n;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bytesDone<sp/>+=n;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>recvline[bytesDone]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;socket<sp/>read<sp/>complete:<sp/>(%d,<sp/>%d)<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>n,<sp/>bytesLeft,<sp/>recvline);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="53"><highlight class="normal">}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="58" refid="net_8h_1adb296d69ad81a26650f6478eb63c78bc" refkind="member"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="net_8c_1adb296d69ad81a26650f6478eb63c78bc" kindref="member">writeSocket</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sock,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>sendline[])</highlight></codeline>
<codeline lineno="59"><highlight class="normal">{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>puts(</highlight><highlight class="stringliteral">&quot;socket<sp/>writing...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>pBuf<sp/>=<sp/>sendline;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0,<sp/>bytesLeft<sp/>=<sp/><ref refid="defines_8h_1a51d90ea93d4b55e086cb490f7478e684" kindref="member">MAX_MSG_LEN</ref><sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(bytesLeft<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((n<sp/>=<sp/>write(sock,<sp/>pBuf,<sp/>bytesLeft))<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>perror(</highlight><highlight class="stringliteral">&quot;ERROR<sp/>writing<sp/>to<sp/>socket&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pBuf<sp/>+=<sp/>n;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bytesLeft<sp/>-=<sp/>n;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;socket<sp/>write<sp/>complete:<sp/>(%d,<sp/>%d)<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>n,<sp/>bytesLeft,<sp/>sendline);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="80"><highlight class="normal">}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="85" refid="net_8h_1a7e8fd0c8a9ece620618794b18387aa99" refkind="member"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="net_8c_1a7e8fd0c8a9ece620618794b18387aa99" kindref="member">connectToServer</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>sock_desc)</highlight></codeline>
<codeline lineno="86"><highlight class="normal">{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sock<sp/>=<sp/>*(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*)<sp/>sock_desc;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sockaddr_in<sp/>server_addr;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>bzero(&amp;server_addr,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>server_addr);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>server_addr.sin_family<sp/>=<sp/>AF_INET;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>server_addr.sin_port<sp/>=<sp/>htons(<ref refid="defines_8h_1aee1132b8a79e9a6dd0d19a93f7133389" kindref="member">SRV_PORT</ref>);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>inet_pton(AF_INET,<sp/><ref refid="defines_8h_1ad43b436f38b6543a54dc74559fe7be11" kindref="member">SRV_ADDR</ref>,<sp/>&amp;(server_addr.sin_addr));</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>invalid_status<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((invalid_status<sp/>=<sp/>connect(sock,<sp/>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>sockaddr<sp/>*)&amp;server_addr,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(server_addr)))<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>perror(</highlight><highlight class="stringliteral">&quot;ERROR<sp/>failed<sp/>to<sp/>connect<sp/>to<sp/>server&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>invalid_status;</highlight></codeline>
<codeline lineno="101"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/strikles/workspace/common/net.c"/>
  </compounddef>
</doxygen>
