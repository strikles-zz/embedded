/*
 ============================================================================
 Name        : client.c
 Author      : 
 Version     :
 Copyright   : Your copyright notice
 Description : Hello World in C, Ansi-style
 ============================================================================
 */

#include <time.h>
#include <unistd.h>

#include <netdb.h>
#include <arpa/inet.h>
#include <sys/socket.h>
#include <sys/types.h>

#include "sensors.h"
#include "xml.h"
#include "client.h"

#ifdef TEST
#include "test.h"
#endif


int main(int argc,char **argv)
{
	srand(time(NULL));

	// generic declarations
    char sendline[MAX_MSG_LEN];
    char recvline[MAX_MSG_LEN];
    uint16_t error_status = 0;

    // linux - addr declarations
    int socket_desc;
    struct sockaddr_in server_addr;

    // linux - net init
    socket_desc = socket(AF_INET, SOCK_STREAM, 0);
    bzero(&server_addr, sizeof server_addr);
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(SRV_PORT);
    inet_pton(AF_INET, SRV_ADDR, &(server_addr.sin_addr));
    connect(socket_desc, (struct sockaddr *)&server_addr, sizeof(server_addr));

    while(1)
    {
        // generate Measurements
        error_status = generateMeasurements();
        if(error_status)
        {
        	perror("Error: generateMeasurements\n");
        	continue;
        }

        // build request
        error_status = buildRequestXML(update, sendline);
        if(error_status)
        {
        	perror("Error: buildRequestXML\n");
        	continue;
        }
        printf("SEND: %s\n", sendline);

        // linux - while send
        write(socket_desc, sendline, strlen(sendline));

    	// reset variables
        bzero(recvline, MAX_MSG_LEN);

        // linux - while read
        read(socket_desc, recvline, MAX_MSG_LEN);
        printf("RECV: %s\n", recvline);

        // linux specific
        sleep(3);
    }
}
