/*
 ============================================================================
 Name        : server.c
 Author      : 
 Version     :
 Copyright   : Your copyright notice
 Description : Hello World in C, Ansi-style
 ============================================================================
 */

#define MAX_MSG_LEN 4098
#define SRV_PORT 6423
#define TEST

#include <time.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <unistd.h>
#include <pthread.h>

#include "../../ezxml/ezxml.h"

#ifdef TEST
#include "test.h"
#endif

typedef enum {
	true,
	false
} Bool_t;

const char* request_types[] = {
	"retrieve",
	"update"
};

typedef enum {
	retrieve,
	update
} Request_t;

const char* brightness_levels[] = {
	"dark",
	"average",
	"bright",
	"max_brightness_levels"
};

typedef enum {
	dark,
	average,
	bright,
	max_brightness_levels
}  Brightness_t;

const char* measurement_types[] = {
	"brightness",
	"humidity",
	"noise",
	"personsPassed",
	"temperature",
	"max_measurements"
};

typedef enum {
	brightness,
	humidity,
	noise,
	personsPassed,
	temperature,
	max_measurements
} Measurement_t;

const char* stat_types[] = {
	"errors",
	"updates",
	"retrieves",
	"max_stats"
};

typedef enum {
	errors,
	updates,
	retrieves,
	max_stats
} Stat_t;

int measurements[max_measurements];
int stats[max_stats];

//the thread function
void *connection_handler(void *);
int buildReplyXML(ezxml_t req_root, char sendline[]);

int updateValues(ezxml_t req_root);
int loadValues();

int main(int argc , char *argv[])
{
	srand(time(NULL));

	#ifdef TEST
	xml_test();
	#endif

    int socket_desc, client_sock, c;
    struct sockaddr_in server, client;

    //Create socket
    socket_desc = socket(AF_INET , SOCK_STREAM , 0);
    if(socket_desc == -1)
    {
        printf("Could not create socket\n");
    }
    puts("Socket created");

    //Prepare the sockaddr_in structure
    bzero(&server, sizeof server);
    server.sin_family = AF_INET;
    server.sin_addr.s_addr = INADDR_ANY;
    server.sin_port = htons(SRV_PORT);

    //Bind
    if(bind(socket_desc,(struct sockaddr *)&server, sizeof(server)) < 0)
    {
        //print the error message
        perror("bind failed. Error");
        return 1;
    }
    puts("bind done");

    //Listen
    listen(socket_desc , 3);

    //Accept and incoming connection
    puts("Waiting for incoming connections...");
    c = sizeof(struct sockaddr_in);
	pthread_t thread_id;
    while((client_sock = accept(socket_desc, (struct sockaddr *)&client, (socklen_t*)&c)))
    {
        puts("Connection accepted");
        if(pthread_create(&thread_id, NULL, connection_handler, (void*) &client_sock) < 0)
        {
            perror("could not create thread");
            return 1;
        }

        //pthread_join( thread_id , NULL);
        puts("Handler assigned");
    }

    if(client_sock < 0)
    {
        perror("accept failed");
        return 1;
    }

    return 0;
}

int validRequest(ezxml_t req_root)
{
	printf("init validRequest\n");

	char* measurement_name;
	int measurement_ndx, cmp, found_measurement, valid_status;
	ezxml_t measurement;

	valid_status = 1;

	if(!req_root)
	{
		printf("validRequest - invalid root param\n");
		return 1;
	}

    for (measurement = req_root->child; measurement; measurement = measurement->next)
    {
    	found_measurement = 0;
    	measurement_name = ezxml_name(measurement);
    	for(measurement_ndx = 0; measurement_ndx < max_measurements; ++measurement_ndx)
    	{
    		printf("%s %d : %s %d\n",
    				measurement_name, strlen(measurement_name),
					measurement_types[measurement_ndx], strlen(measurement_types[measurement_ndx]));

    		cmp = 0;
    		cmp = strncmp(measurement_types[measurement_ndx], measurement_name, strlen(measurement_name)-1);
    		if(0 == cmp)
    	    {
    			printf("found measurement :) cmp %d\n", cmp);
    	        found_measurement = 1;
    	        break;
    	    }
    	}

    	// invalid request - property does not exist
    	if(0 == found_measurement)
    	{
    		printf("Property does not exist: %s\n", measurement_name);
    		valid_status = 0;
    		//free(measurement_name);
    		break;
    	}
    }

    //ezxml_free(measurement);

	return valid_status;
}

int buildReplyXML(ezxml_t req_root, char sendline[])
{
	printf("init Building XML \n");
	ezxml_t root, measurement;
	char* measurement_name;
	char* status_xml;
	char* req_type;
	char* measurement_value;
	int measurement_ndx, xml_size, error_status;

	error_status = xml_size = 0;
	root = ezxml_new("status");
	req_type = ezxml_name(req_root);

    for (measurement = req_root->child; measurement; measurement = measurement->next)
    {
    	measurement_name = ezxml_name(measurement);
    	for(measurement_ndx = 0; measurement_ndx < max_measurements; ++measurement_ndx)
    	{
    		//found our match
    	    if(0 == strncmp(measurement_types[measurement_ndx], measurement_name, strlen(measurement_name)))
    	    {
    	    	// update value
    	    	measurement_value = ezxml_txt(measurement);
    	    	if(0 == strncmp(req_type, "update", strlen("update")-1))
    	    	{
					measurements[measurement_ndx] = atoi(measurement_value);
    	    	}

    	    	// add tag
    	    	ezxml_t child_tag = ezxml_add_child(root, measurement_name, 4);
    	    	ezxml_set_txt(child_tag, measurement_value);

    	        break;
    	    }
    	}
    	//free(measurement_name);
    }

    status_xml = ezxml_toxml(root);
    xml_size = strlen(status_xml)+1;
	if(MAX_MSG_LEN < xml_size)
	{
		error_status = true;
	}
	else
	{
		printf("Doc: %s\n", status_xml);
		memcpy(sendline, status_xml, xml_size);
	}

	free(status_xml);
	ezxml_free(root);
	//ezxml_free(measurement);

    return error_status;
}

/*
 * This will handle connection for each client
 * */
void *connection_handler(void *socket_desc)
{
    //Get the socket descriptor
    int sock = *(int*) socket_desc;
    int read_size;
	char recvline[MAX_MSG_LEN];
	char sendline[MAX_MSG_LEN];
	Bool_t valid_request = true, valid_response = true;

	bzero(recvline, sizeof recvline);
	bzero(sendline, sizeof sendline);

    //Receive a message from client
    while((read_size = recv(sock, recvline, MAX_MSG_LEN, 0)) > 0)
    {
    	recvline[read_size] = '\0';
        printf("%d - %s\n", read_size, recvline);

		ezxml_t req_root = ezxml_parse_str(recvline, read_size);
		if(!req_root)
		{
			printf("Invalid request - disconnect client\n");
			break;
		}

		valid_request = validRequest(req_root);
		if(0 == valid_request)
		{
			printf("Invalid request property - disconnect client\n");
			break;
		}

		// always send a response
		valid_response = buildReplyXML(req_root, sendline);
		if(0 == valid_response)
		{
			printf("invalid response - oops\n");
			continue;
		}

		//Send the message back to client
		write(sock, sendline, strlen(sendline));

		ezxml_free(req_root);

    }

    if(0 == read_size)
    {
        printf("Client disconnected\n");
        fflush(stdout);
    }
    else if(-1 == read_size)
    {
        printf("recv failed\n");
    }

    return 0;
}
