/*
 ============================================================================
 Name        : server.c
 Author      : 
 Version     :
 Copyright   : Your copyright notice
 Description : Hello World in C, Ansi-style
 ============================================================================
 */

#define SRV_PORT 6423
#define TEST

#include <sys/types.h>

#include <netdb.h>
#include <arpa/inet.h>
#include <sys/socket.h>
#include <pthread.h>
#include <time.h>
#include <unistd.h>

#include "net.h"
#include "sensors.h"
#include "xml.h"
#include "server.h"

#ifdef TEST
#include "tests/test.h"
#endif


int main(int argc , char *argv[])
{
	srand(time(NULL));

	#ifdef TEST
	xml_test();
	#endif

    int socket_desc, client_sock, c;
    struct sockaddr_in server, client;

    //Create socket
    socket_desc = socket(AF_INET , SOCK_STREAM , 0);
    if(socket_desc == -1)
    {
        printf("Could not create socket\n");
    }
    puts("Socket created");

    //Prepare the sockaddr_in structure
    bzero(&server, sizeof server);
    server.sin_family = AF_INET;
    server.sin_addr.s_addr = INADDR_ANY;
    server.sin_port = htons(SRV_PORT);

    //Bind
    if(bind(socket_desc,(struct sockaddr *)&server, sizeof(server)) < 0)
    {
        //print the error message
        perror("bind failed. Error");
        return 1;
    }
    puts("bind done");

    //Listen
    listen(socket_desc , 3);

    //Accept and incoming connection
    puts("Waiting for incoming connections...");
    c = sizeof(struct sockaddr_in);
	pthread_t thread_id;
    while((client_sock = accept(socket_desc, (struct sockaddr *)&client, (socklen_t*)&c)))
    {
        puts("Connection accepted");
        if(pthread_create(&thread_id, NULL, connection_handler, (void*) &client_sock) < 0)
        {
            perror("could not create thread");
            return 1;
        }

        //pthread_join( thread_id , NULL);
        puts("Handler assigned");
    }

    if(client_sock < 0)
    {
        perror("accept failed");
        return 1;
    }

    return 0;
}

/*
 * This will handle connection for each client
 * */
void *connection_handler(void *socket_desc)
{
    //Get the socket descriptor
    int sock = *(int*) socket_desc;
    int error_status = 0, read_size = 0, write_size = 0;
	char recvline[MAX_MSG_LEN];
	char sendline[MAX_MSG_LEN];
	eBool valid_request = true, valid_response = true;
	ezxml_t req_root;

	while(1)
	{
		bzero(recvline, sizeof recvline);
		bzero(sendline, sizeof sendline);

    	// read
        if((read_size = readSocket(socket_desc, sendline)) == -1)
        {
        	perror("Error: readSocket\n");
        	continue;
        }
        printf("RECV: %s\n", recvline);

        // parse request
		if(!(req_root = ezxml_parse_str(recvline, read_size)))
		{
			perror("Invalid XML request - disconnect client\n");
			break;
		}

		if(!(valid_request = validRequest(req_root)))
		{
			perror("Invalid request property - disconnect client\n");
			break;
		}

		// build XML string response
		if(!(valid_response = buildReplyXML(req_root, sendline)))
		{
			perror("invalid response - oops\n");
			break;
		}

		// write to socket
		if((error_status = writeSocket(socket_desc, sendline)) == -1)
		{
			perror("Error: writeSocket\n");
			continue;
		}
		printf("SEND: %s\n", sendline);

		ezxml_free(req_root);
	}

	close(sock);

    return 0;
}
